#!/usr/bin/env perl
#===============================================================================
#                                  lmt_update_mds_agg
#-------------------------------------------------------------------------------
#  Purpose:     Update the aggregate-hour table from raw data (MDS)
#
#  Author:      Jeff Long, LLNL, 02/17/2007
#  Notes:       
#	This is part of LMT2 -- the second generation of Lustre Monitoring
#	Tools.
#
#	This script updates the MDS_AGGREGATE_HOUR table with information
#	collected from the raw MDS_DATA table.
#
#  Modification History:
#       02/17/2007 - jwl: Initial version.
#===============================================================================

BEGIN {
    push @INC, "@X_DATADIR@/@PACKAGE@";
}

use strict;
use Date::Manip;
use Getopt::Std;
use LMT;

$| = 1;

Usage() if (not getopts('c:dvf:t:'));

my $verbose   = (defined $main::opt_v) ? 1 : 0;
my $debug     = (defined $main::opt_d) ? 1 : 0;
my $filesys   = (defined $main::opt_f) ? $main::opt_f : undef;
my $hourlyTable=(defined $main::opt_t) ? $main::opt_t : "MDS_AGGREGATE_HOUR";
my $rawTable   =(defined $main::opt_r) ? $main::opt_r : "MDS_DATA";
my $config    = (defined $main::opt_c) ? $main::opt_c : undef;

Usage("Must specify filesystem") if (not defined($filesys));

print "Updating $hourlyTable for $filesys...\n";

my $lmt = LMT->new($config);
$lmt->connect($filesys) || die ("Could not connect to $filesys\n");

print "Determining starting and ending points in various tables...\n";
my ($startTimestamp, $finalTimestamp) = $lmt->getStartAndFinalAggTimestamps($rawTable, $hourlyTable);

# Use a hash of hashes to store the aggregate data. Top-level hash (e.g., read_bytes)
# is per MDS. Low-level hash has all info for given variable in given mds.
my %kbytes_free=("label" => "KBYTES_FREE");
my %kbytes_used=("label" => "KBYTES_USED");
my %inodes_free=("label" => "INODES_FREE");
my %inodes_used=("label" => "INODES_USED");
my %pct_cpu    =("label" => "PCT_CPU");

# Update the following array if you add additional vars to MDS data collection:
my @mdsHashRefs=(\%kbytes_free, \%kbytes_used, \%pct_cpu, \%inodes_free, \%inodes_used);
my ($sth,$ref);
#JWL DEBUG
# The following timestamps encompass an odd window on ti1 where no new data was entered
#$startTimestamp = '20070111140000';
#$finalTimestamp = '20070116120000';
# The following timestamps help debug a window of little activity
#$startTimestamp = '20070220000000';
#$finalTimestamp = '20070220200000';
#$startTimestamp = '20070227120000';
#$finalTimestamp = '20070227140000';


# Loop hour-by-hour getting pertinent data

print "Starting timestamp=$startTimestamp\nEnding timestamp  =$finalTimestamp\n";
print "Each '.' represents one hour's worth of data:\n" if (not $verbose);

while ($startTimestamp lt $finalTimestamp) {
    print "Doing timestamp: $startTimestamp\n" if ($verbose);

    my %counts=();

    my $query = "select distinct x1.*,TIMESTAMP from $rawTable as x1, TIMESTAMP_INFO where " .
	"x1.TS_ID=TIMESTAMP_INFO.TS_ID and TIMESTAMP >= ? and " .
	"TIMESTAMP <= DATE_ADD(?, INTERVAL 60 MINUTE) " .
	"order by TIMESTAMP";
    print "Issuing query for retrieving one hour's worth of data:\n$query\n" if ($verbose);

    $sth = $lmt->execQuery ($query, $startTimestamp, $startTimestamp);

    while ($ref = $sth->fetchrow_hashref()) {
	my $mdsId = $ref->{MDS_ID};
	$counts{$mdsId}++;
	
	if ($counts{$mdsId} == 1) {   # First time for this MDS so init everything
	    foreach my $hashref (@mdsHashRefs) {
		if (not defined $hashref->{$mdsId}) {
		    # Create initial hash if first time through...
		    %{$hashref->{$mdsId}}=("type" => "MDS");
		}
		# Set initial values in hash
		initVar($lmt, $ref, $hashref->{label}, \$hashref->{$mdsId});
	    }
	}
	
	# Process the "simple" scalars that don't require differencing
	updateVar($ref, \$pct_cpu{$mdsId});
	updateVar($ref, \$kbytes_free{$mdsId});
	updateVar($ref, \$kbytes_used{$mdsId});
	updateVar($ref, \$inodes_free{$mdsId});
	updateVar($ref, \$inodes_used{$mdsId});
    } # While loop over result set for one hour

    # Compute averages...
    foreach my $i (keys %kbytes_free) {
	next if ($i eq "label");
	next if (not defined $counts{$i} or $counts{$i} == 0);
	
	$kbytes_free{$i}->{AVERAGE}  = $kbytes_free{$i}->{sum}  / $counts{$i};
	$kbytes_used{$i}->{AVERAGE}  = $kbytes_used{$i}->{sum}  / $counts{$i};
	$inodes_free{$i}->{AVERAGE}  = $inodes_free{$i}->{sum}  / $counts{$i};
	$inodes_used{$i}->{AVERAGE}  = $inodes_used{$i}->{sum}  / $counts{$i};
	$pct_cpu{$i}->{AVERAGE   }   = $pct_cpu{$i}->{sum}      / $counts{$i};
    }

    # Insert record into aggregate table
    # 1. Create timestamp for 'startTimestamp'
    # 2. Insert record for each variable (BYTES_READ,BYTES_WRITTEN) into agg table
    my $ts_id = $lmt->createOrFetchTimestampId ($startTimestamp);

    foreach my $i (sort keys %kbytes_free) {
	next if ($i eq "label");
	next if ($counts{$i} == 0);	# Don't update if no new data read

	my %extras = ("MDS_ID" => $i, "TS_ID" => $ts_id, "NUM_SAMPLES" => $counts{$i});

	writeVar($lmt, $hourlyTable, \%extras, $kbytes_free{$i});
	writeVar($lmt, $hourlyTable, \%extras, $kbytes_used{$i});
	writeVar($lmt, $hourlyTable, \%extras, $inodes_free{$i});
	writeVar($lmt, $hourlyTable, \%extras, $inodes_used{$i});
	writeVar($lmt, $hourlyTable, \%extras, $pct_cpu{$i});
    }

    # Add one hour to startTimestamp
    my $date = ParseDate($startTimestamp);
    my $err;
    $date = DateCalc($date, "+ 1hour", \$err);
    die ("date calc error: $err\n") if (not $date or $err);
    $startTimestamp = $date;
    $startTimestamp =~ s/://g;
    print "Next loop start date = $date ($startTimestamp)\n" if ($verbose);

    print "." if (not $verbose);
}
print "\n";

# Disconnect from the database.
$lmt->disconnect();
exit;


#
# initVar -- Initialize an aggregate MDS variable hash
#
sub initVar {
    my $lmt = shift;
    my $ref = shift;
    my $name = shift;
    my $var = shift;

    my $varref=$$var;

    if (not $varref) {
	print "[initVar] -- Failed start-up check. varref is null!\n" if ($verbose);
	return;
    }

    $varref->{VARIABLE_ID} = $lmt->getMdsVariableId($name);
    $varref->{name} = $name;  # $rawTable column name
    $varref->{MAXVAL} = -1;
    $varref->{MINVAL} = 1.0e+50;
    $varref->{AVERAGE} = 0;
    $varref->{sum} = 0;
}

#
#  updateVar -- Update various elements of aggregate data for this variable
#
sub updateVar {
    my $dbref = shift;
    my $var = shift;
    my $varref=$$var;

    if (not $varref) {
	print "[updateVar] -- Failed start-up check. varref is null!\n" if ($verbose);
	return;
    }

    my $name = $varref->{name};

    if (defined $dbref->{$name}) {  # Skip undefined db values
	# (Normal) variables are handled more simply...
	$varref->{MAXVAL} = LMT::max($varref->{MAXVAL}, $dbref->{$name});
	$varref->{MINVAL} = LMT::min($varref->{MINVAL}, $dbref->{$name});
	$varref->{sum} += $dbref->{$name};   # For averaging purposes
    } else {
	print "[updateVar] -- Skipping undefined var for $name\n" if ($verbose);
	if ($debug) {
	    foreach my $k (keys %{$dbref}) {
		print "[updateVar] dbref: $k = " . $dbref->{$k} . "\n";
	    }
	}
    }
}

#
# writeVar -- Insert record into aggregate table containing information in this variable
#
sub writeVar {
    my $lmt = shift;
    my $tableName = shift;
    my $extraref = shift;
    my $varref = shift;
    
    my $name = $varref->{name};
    print "[writeVar] Writing record for $name...\n" if ($debug);

    # Tack extra column values onto main hash before writing
    if ($extraref) {
	foreach (keys %{$extraref}) {
	    $varref->{$_} = $extraref->{$_};
	}
    }

    if (not defined $varref->{VARIABLE_ID}) {
	print "[writeVar] ERROR -- null variable id\n";
	print "[writeVar] Offending var: " . $varref->{MDS_ID} . " tsid=" . $varref->{TS_ID} .
	    " name=" . $varref->{name} . "\n";
	die();
    }

    if (not defined $varref->{NUM_SAMPLES}) {
	$varref->{NUM_SAMPLES} = 0;
    }

    if (defined $varref->{sum} and $varref->{sum} == 0) {
	# No data was entered for this record. Could either ignore this record,
	# or put int a bunch of NULL values for MIN, MAX, etc.
#	$varref->{MINVAL} = 0;
#	$varref->{MAXVAL} = 0;
	return;
    }

    # Delete previous record
    my $query = "delete from $tableName where MDS_ID=? and TS_ID=? and VARIABLE_ID=?";
    print "[writeVar] Doing delete query:\n$query\n" if ($debug);
    my $res = $lmt->doQuery($query, $varref->{MDS_ID}, $varref->{TS_ID}, $varref->{VARIABLE_ID});

    
    # Add new record
    #--------------------
    # Generate list of keys. Note that only upper case fields will be
    # written. Lower case fields are for working values, etc.
    my @keys = ();  
    foreach (keys %{$varref}) {
	if ($_ =~ /^[A-Z]/) { 
	    push @keys, $_;
	}
    }

    $query = "insert into $tableName (";
    foreach (@keys) {
	$query .= "$_,";
    }
    chop $query; # Trailing comma
    $query .= ") values (";
    foreach (@keys) {
	$query .= $varref->{$_} . ",";
    }
    chop $query; # Trailing comma
    $query .= ")";

    print "insert query=\n$query\n" if ($debug);
    my $res = $lmt->doQuery($query);

    return $res;
}

sub Usage {
    my $msg = shift;
    print "$msg\n\n" if ($msg);

    print<<EOF;
Usage: $0 [-d] [-v] [-t table] -f filesys 

 Where:
    -d         : Enables debug mode
    -v         : Enables verbose mode
    -f filesys : Operates on given filesystem (required)
    -t table   : Updates given table (default is MDS_AGGREGATE_HOUR)
EOF

  exit 1;
}
