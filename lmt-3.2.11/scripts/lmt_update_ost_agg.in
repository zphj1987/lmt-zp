#!/usr/bin/env perl
#===============================================================================
#                                    lmt_update_ost_agg
#-------------------------------------------------------------------------------
#  Purpose:     Update the aggregate-hour table from raw data (OST)
#
#  Author:      Jeff Long, LLNL, 02/17/2007
#  Notes:       
#	This is part of LMT2 -- the second generation of Lustre Monitoring
#	Tools.
#
#	This script updates the OST_AGGREGATE_HOUR table with information
#	collected from the raw OST_DATA table.
#
#  Modification History:
#       02/17/2007 - jwl: Initial version.
#===============================================================================

BEGIN {
    push @INC, "@X_DATADIR@/@PACKAGE@";
}

use strict;
use Date::Manip;
use Getopt::Std;
use LMT;

$| = 1;

Usage() if (not getopts('c:dvf:r:t:'));

my $verbose   = (defined $main::opt_v) ? 1 : 0;
my $debug     = (defined $main::opt_d) ? 1 : 0;
my $filesys   = (defined $main::opt_f) ? $main::opt_f : undef;
my $hourlyTable=(defined $main::opt_t) ? $main::opt_t : "OST_AGGREGATE_HOUR";
my $rawTable   =(defined $main::opt_r) ? $main::opt_r : "OST_DATA";
my $config    = (defined $main::opt_c) ? $main::opt_c : undef;

Usage("Must specify filesystem") if (not defined($filesys));

print "Updating $hourlyTable for $filesys...\n";

my $lmt = LMT->new($config);
$lmt->connect($filesys);

die ("Could not connect to $filesys\n") if (not $lmt);

print "Determining starting and ending points in various tables...\n";
my ($startTimestamp, $finalTimestamp) = $lmt->getStartAndFinalAggTimestamps($rawTable, $hourlyTable);

# For printing of per-ost summaries
my ($total_rd_sum,$total_rd_max,$total_rd_min,$total_rd_avg) = 0 x 4;
my ($total_wt_sum,$total_wt_max,$total_wt_min,$total_wt_avg) = 0 x 4;

# Use a hash of hashes to store the aggregate data. Top-level hash (e.g., read_bytes)
# is per OST. Low-level hash has all info for given variable in given ost.
my %read_bytes =("label" => "READ_BYTES");
my %write_bytes=("label" => "WRITE_BYTES");
my %pct_cpu    =("label" => "PCT_CPU");
my %kbytes_free=("label" => "KBYTES_FREE");
my %kbytes_used=("label" => "KBYTES_USED");
my %inodes_free=("label" => "INODES_FREE");
my %inodes_used=("label" => "INODES_USED");
my %read_rate  =("label" => "READ_RATE");
my %write_rate =("label" => "WRITE_RATE");
# Update the following array if you add additional vars to OST data collection:
my @ostHashRefs=(\%read_bytes, \%write_bytes, \%pct_cpu, \%kbytes_free, \%kbytes_used,
		 \%inodes_free, \%inodes_used, \%read_rate, \%write_rate);
my %prev_ts=();
my ($sth,$ref);

# Important initialization step. Must get READ_BYTES and WRITE_BYTES from the
# previous timestamp to allow proper differencing below. Each OST may have a 
# different timestamp, so must get the preceding timestamp separately for each ost.
print "Initializing read-bytes and write-bytes from previous timestamp record...\n";
my @allOstIds = $lmt->getTablesOstIds ($rawTable);
foreach my $ostid (@allOstIds) {
    # Get READ_BYTES and WRITE_BYTES from the record immediately preceding the one at startTimestamp
    # Note: In its purest form this query can be extremely slow, especially since it has to be done 
    # oncer per OST. By bracketing the timestamps the query was made about 50x faster.
    my $query = "select distinct x1.TS_ID,x1.READ_BYTES,x1.WRITE_BYTES,TIMESTAMP from $rawTable as " .
	"x1,TIMESTAMP_INFO " .
	"where x1.TS_ID=TIMESTAMP_INFO.TS_ID and OST_ID=? and " .
	"TIMESTAMP=(select max(x2.TIMESTAMP) from TIMESTAMP_INFO as x2,$rawTable where " .
	"OST_ID=? and x2.TS_ID=$rawTable.TS_ID and (TIMESTAMP > DATE_ADD(?, INTERVAL -2 HOUR) and TIMESTAMP < ?))";

    my $sth = $lmt->execQuery ($query, $ostid, $ostid, $startTimestamp, $startTimestamp);
    my $ref = $sth->fetchrow_hashref();

    next if (not $ref);
    my %rh = ("type" => "OST");
    $read_bytes{$ostid} = \%rh;
    $read_bytes{$ostid}->{prev_rw_bytes} = $ref->{READ_BYTES};
    my %wh = ("type" => "OST");
    $write_bytes{$ostid} = \%wh;
    $write_bytes{$ostid}->{prev_rw_bytes} = $ref->{WRITE_BYTES};

    $prev_ts{$ostid} = $ref->{TIMESTAMP};
}

# Loop hour-by-hour getting pertinent data
print "Starting timestamp=$startTimestamp\nEnding timestamp  =$finalTimestamp\n";
print "Each '.' represents one hour's worth of data:\n" if (not $verbose);

while ($startTimestamp lt $finalTimestamp) {
    print "Doing timestamp: $startTimestamp\n" if ($verbose);
    my %counts=();

    my $query = "select distinct x1.*,TIMESTAMP from $rawTable as x1, TIMESTAMP_INFO where " .
	"x1.TS_ID=TIMESTAMP_INFO.TS_ID and TIMESTAMP >= ? and " .
	"TIMESTAMP <= DATE_ADD(?, INTERVAL 60 MINUTE) " .
	"order by TIMESTAMP";
    print "Issuing query for retrieving one hour's worth of data:\n$query\n" if ($verbose);

    $sth = $lmt->execQuery ($query, $startTimestamp, $startTimestamp);

    print "Processing query results for one hour's worth of data....\n" if ($verbose);

    while ($ref = $sth->fetchrow_hashref()) {
	my $ostId = $ref->{OST_ID};
	$counts{$ostId}++;
	
	if ($counts{$ostId} == 1) {   # First time for this OST so init everything
	    if (not defined $prev_ts{$ostId} or not $prev_ts{$ostId}) {
		$prev_ts{$ostId} = $ref->{TIMESTAMP};
	    }

	    foreach my $hashref (@ostHashRefs) {
		if (not defined $hashref->{$ostId}) {
		    # Create initial hash if first time through...
		    %{$hashref->{$ostId}}=("type" => "OST");
		}
		# Set initial values in hash
		initVar($lmt, $ref, $hashref->{label}, \$hashref->{$ostId});
	    }
	}
	
	# Process the "complex" values that require differencing...
	updateVar($ref, \$read_bytes{$ostId});
	updateVar($ref, \$write_bytes{$ostId});

	# Process the derived vars
	my ($nbytes,$timediff,$rate);
	$nbytes = $read_bytes{$ostId}->{nbytes};
	$timediff = $lmt->diffTimestamps ($ref->{TIMESTAMP}, $prev_ts{$ostId});
	if ($timediff > 0) {
	    $rate = $nbytes / $timediff;
	} else {
	    $rate = 0;
	}
	$ref->{READ_RATE} = $rate;
	updateVar($ref, \$read_rate{$ostId});

	$nbytes = $write_bytes{$ostId}->{nbytes};
	if ($timediff > 0) {
	    $rate = $nbytes / $timediff;
	} else {
	    $rate = 0;
	}
	$ref->{WRITE_RATE} = $rate;
	updateVar($ref, \$write_rate{$ostId});
	$prev_ts{$ostId} = $ref->{TIMESTAMP};

	# Process the "simple" scalars that don't require differencing
	updateVar($ref, \$pct_cpu{$ostId});
	updateVar($ref, \$kbytes_free{$ostId});
	updateVar($ref, \$kbytes_used{$ostId});
	updateVar($ref, \$inodes_free{$ostId});
	updateVar($ref, \$inodes_used{$ostId});
    } # While loop over result set for one hour

    print "Completed processing query results for one hour's worth of data.\n" if ($verbose);

    # Compute averages...
    foreach my $i (keys %read_bytes) {
	next if ($i eq "label");
	next if ($counts{$i} == 0);	# Don't update if no new data read

	# Only read_bytes and write_bytes have meaningful AGGREGATE value.
	# For other vars (e.g., pct_cpu) it won't be written to the DB.
	$read_bytes{$i}->{AGGREGATE}  = $read_bytes{$i}->{sum};
	$write_bytes{$i}->{AGGREGATE} = $write_bytes{$i}->{sum};

	next if (not defined $counts{$i} or $counts{$i} == 0);
	
	$read_bytes{$i}->{AVERAGE}  = $read_bytes{$i}->{sum}  / $counts{$i};
	$write_bytes{$i}->{AVERAGE} = $write_bytes{$i}->{sum} / $counts{$i};
	$read_rate{$i}->{AVERAGE}   = $read_rate{$i}->{sum}   / $counts{$i};
	$write_rate{$i}->{AVERAGE}  = $write_rate{$i}->{sum}  / $counts{$i};
	$pct_cpu{$i}->{AVERAGE}     = $pct_cpu{$i}->{sum}     / $counts{$i};
	$kbytes_free{$i}->{AVERAGE} = $kbytes_free{$i}->{sum} / $counts{$i};
	$kbytes_used{$i}->{AVERAGE} = $kbytes_used{$i}->{sum} / $counts{$i};
	$inodes_free{$i}->{AVERAGE} = $inodes_free{$i}->{sum} / $counts{$i};
	$inodes_used{$i}->{AVERAGE} = $inodes_used{$i}->{sum} / $counts{$i};
    }

    if ($debug) {
	print "Data for one hour period starting at $startTimestamp\n";
	foreach my $i (sort keys %read_bytes) {
	    next if ($i eq "label");
	    printf "%d (%s): min=%d, max=%d, sum=%d, avg=%d\n",
   	        $i, "READ", $read_bytes{$i}->{MINVAL}, $read_bytes{$i}->{MAXVAL},
	        $read_bytes{$i}->{AGGREGATE}, $read_bytes{$i}->{AVERAGE};
	    printf "%d (%s): min=%d, max=%d, sum=%d, avg=%d\n",
   	        $i, "WRITE", $write_bytes{$i}->{MINVAL}, $write_bytes{$i}->{MAXVAL},
	        $write_bytes{$i}->{AGGREGATE}, $write_bytes{$i}->{AVERAGE};
	}
    }
    # Generate summaries across all OSTs.
    foreach my $i (keys %read_bytes) {
	next if ($i eq "label");
	next if ($counts{$i} == 0);	# Don't update if no new data read

	$total_rd_sum += $read_bytes{$i}->{AGGREGATE};  $total_wt_sum += $write_bytes{$i}->{AGGREGATE};
	$total_rd_max += $read_bytes{$i}->{MAXVAL};  $total_wt_max += $write_bytes{$i}->{MAXVAL};
	$total_rd_min += $read_bytes{$i}->{MINVAL};  $total_wt_min += $write_bytes{$i}->{MINVAL};
	$total_rd_avg += $read_bytes{$i}->{AVERAGE}; $total_wt_avg += $write_bytes{$i}->{AVERAGE};
    }

    # Insert record into aggregate table
    # 1. Create timestamp for 'startTimestamp'
    # 2. Insert record for each variable (BYTES_READ,BYTES_WRITTEN) into agg table
    my $ts_id = $lmt->createOrFetchTimestampId ($startTimestamp);

    foreach my $i (sort keys %read_bytes) {
	next if ($i eq "label");
	next if ($counts{$i} == 0);	# Don't update if no new data read

	my %extras = ("OST_ID" => $i, "TS_ID" => $ts_id, "NUM_SAMPLES" => $counts{$i});

	writeVar($lmt, $hourlyTable, \%extras, $read_bytes{$i});
	writeVar($lmt, $hourlyTable, \%extras, $write_bytes{$i});
	writeVar($lmt, $hourlyTable, \%extras, $read_rate{$i});
	writeVar($lmt, $hourlyTable, \%extras, $write_rate{$i});
	writeVar($lmt, $hourlyTable, \%extras, $pct_cpu{$i});
	writeVar($lmt, $hourlyTable, \%extras, $kbytes_free{$i});
	writeVar($lmt, $hourlyTable, \%extras, $kbytes_used{$i});
	writeVar($lmt, $hourlyTable, \%extras, $inodes_free{$i});
	writeVar($lmt, $hourlyTable, \%extras, $inodes_used{$i});
    }

    # Add one hour to startTimestamp
    my $date = ParseDate($startTimestamp);
    my $err;
    $date = DateCalc($date, "+ 1hour", \$err);
    die ("date calc error: $err\n") if (not $date or $err);
    $startTimestamp = $date;
    $startTimestamp =~ s/://g;
    print "Next loop start date = $date ($startTimestamp)\n\n" if ($verbose);

    print "." if (not $verbose);
}
print "\n";

# Disconnect from the database.
$lmt->disconnect();


# Print sums across all osts
print "Total (READ): min=$total_rd_min, max=$total_rd_max, sum=$total_rd_sum, avg=$total_rd_avg\n";
print "Total (WRITE): min=$total_wt_min, max=$total_wt_max, sum=$total_wt_sum, avg=$total_wt_avg\n";
exit;


#
# initVar -- Initialize an aggregate OST variable hash
#
sub initVar {
    my $lmt = shift;
    my $ref = shift;
    my $name = shift;
    my $var = shift;

    my $varref=$$var;

    if (not $varref) {
	print "[initVar] -- Failed start-up check. varref is null!\n" if ($verbose);
	return;
    }

    $varref->{VARIABLE_ID} = $lmt->getOstVariableId($name);
    $varref->{name} = $name;  # rawTable column name
    $varref->{MAXVAL} = -1;
    $varref->{MINVAL} = 1.0e+50;
    $varref->{AVERAGE} = 0;
    $varref->{sum} = 0;
    if ($name eq "READ_BYTES" or $name eq "WRITE_BYTES") {
	if (not defined $varref->{prev_rw_bytes}) {
	    $varref->{prev_rw_bytes} = 0;
	    $varref->{nbytes} = 0;
	}
    }
}

#
#  updateVar -- Update various elements of aggregate data for this variable
#
sub updateVar {
    my $dbref = shift;
    my $var = shift;
    my $varref=$$var;

    if (not $varref) {
	print "[updateVar] -- Failed start-up check. varref is null!\n" if ($verbose);
	return;
    }

    my $name = $varref->{name};

    if ($name eq "READ_BYTES" or $name eq "WRITE_BYTES") {
	# READ_BYTES and WRITE_BYTES are running sums of bytes read and written.
	# To get actual number of bytes read or written have to diff with prev value.
	# Also, value is reset to 0 if Lustre or an OSS is restarted, so have to watch
	# for that special case.

	my $nbytes = $dbref->{$name} - $varref->{prev_rw_bytes};
	$nbytes = $dbref->{$name} if ($nbytes < 0);
	
	$varref->{MAXVAL} = LMT::max($varref->{MAXVAL}, $nbytes);
	$varref->{MINVAL} = LMT::min($varref->{MINVAL}, $nbytes);
	$varref->{sum} += $nbytes;                   # For averaging purposes
	$varref->{prev_rw_bytes} = $dbref->{$name};  # Set for next time around
	$varref->{nbytes} = $nbytes;                 # For use in calculating rates

    } else {

	if (defined $dbref->{$name}) {  # Skip undefined db values
	    # (Normal) variables are handled more simply...
	    $varref->{MAXVAL} = LMT::max($varref->{MAXVAL}, $dbref->{$name});
	    $varref->{MINVAL} = LMT::min($varref->{MINVAL}, $dbref->{$name});
	    $varref->{sum} += $dbref->{$name};   # For averaging purposes
	} else {
	    print "[updateVar] -- Skipping undefined var for $name\n" if ($verbose);
	}
    }
}

#
# writeVar -- Insert record into aggregate table containing information in this variable
#
sub writeVar {
    my $lmt = shift;
    my $tableName = shift;
    my $extraref = shift;
    my $varref = shift;
    
    my $name = $varref->{name};
    print "[writeVar] Writing record for $name...\n" if ($debug);

    # Tack extra column values onto main hash before writing
    if ($extraref) {
	foreach (keys %{$extraref}) {
	    $varref->{$_} = $extraref->{$_};
	}
    }

    if (not defined $varref->{VARIABLE_ID}) {
	print "[writeVar] ERROR -- null variable id\n";
	print "[writeVar] Offending var: " . $varref->{OST_ID} . " tsid=" . $varref->{TS_ID} .
	    " name=" . $varref->{name} . "\n";
	die();
    }

    if (not defined $varref->{NUM_SAMPLES}) {
	$varref->{NUM_SAMPLES} = 0;
    }

    # Delete previous record
    my $query = "delete from $tableName where OST_ID=? and TS_ID=? and VARIABLE_ID=?";
    print "[writeVar] Doing delete query:\n$query\n" if ($debug);
    my $res = $lmt->doQuery($query, $varref->{OST_ID}, $varref->{TS_ID}, $varref->{VARIABLE_ID});

    
    # Add new record
    #--------------------
    # Generate list of keys. Note that only upper case fields will be
    # written. Lower case fields are for working values, etc.
    my @keys = ();  
    foreach (keys %{$varref}) {
	if ($_ =~ /^[A-Z]/) { 
	    push @keys, $_;
	}
    }

    $query = "insert into $tableName (";
    foreach (@keys) {
	$query .= "$_,";
    }
    chop $query; # Trailing comma
    $query .= ") values (";
    foreach (@keys) {
	$query .= $varref->{$_} . ",";
    }
    chop $query; # Trailing comma
    $query .= ")";

    print "insert query=\n$query\n" if ($debug);
    my $res = $lmt->doQuery($query);

    return $res;
}

sub Usage {
    my $msg = shift;
    print "$msg\n\n" if ($msg);

    print<<EOF;
Usage: $0 [-d] [-v] [-t table] -f filesys

 Where:
    -d         : Enables debug mode
    -v         : Enables verbose mode
    -f filesys : Operates on given filesystem (required)
    -t table   : Updates given table (default is OST_AGGREGATE_HOUR)
EOF

  exit 1;
}
